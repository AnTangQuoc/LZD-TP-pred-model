{
  "hash": "eb7b304b6b026fd2f11846584305e7b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Descriptive Statistics\n---\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsource(\"notebooks/initialize-data-analysis.r\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nRows: 5669 Columns: 113\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): patient_ID, site, dept, LZD_route\ndbl  (20): patient_age, patient_weight, charlson, baseline_CLCR, baseline_WB...\nlgl  (85): patient_sex, dept_ICU, dept_ER, dept_other, invasive_ETI, invasiv...\ndate  (4): baseline_date, LZD_start, LZD_end, test_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 780 Columns: 105\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): patient_ID, site, dept, LZD_route\ndbl  (13): patient_age, patient_weight, charlson, baseline_CLCR, baseline_WB...\nlgl  (85): patient_sex, dept_ICU, dept_ER, dept_other, invasive_ETI, invasiv...\ndate  (3): baseline_date, LZD_start, LZD_end\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(gtsummary)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n#BlackLivesMatter\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ntable_stats <- data_patient_complete |>\n  select(\n    all_of(predictor_list), starts_with(\"comed\"), flag_ADR_TP_ID\n  ) |>\n  tbl_summary(\n    by = flag_ADR_TP_ID,\n    statistic = list(all_continuous() ~ \"{median} ({p25} - {p75})\"),\n    missing = \"no\"\n  ) |>\n  # modify_table_body(\n  #   ~ .x |>\n  #     mutate(stat_1 = if_else(str_detect(stat_1, \"NA\"), NA, stat_1))\n  # ) |>\n  add_overall() |>\n  bold_labels()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.0     ✔ tune         1.1.2\n✔ infer        1.0.5     ✔ workflows    1.1.3\n✔ modeldata    1.3.0     ✔ workflowsets 1.0.1\n✔ parsnip      1.1.1     ✔ yardstick    1.3.0\n✔ recipes      1.0.9     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ recipes::all_double()  masks gtsummary::all_double()\n✖ recipes::all_factor()  masks gtsummary::all_factor()\n✖ recipes::all_integer() masks gtsummary::all_integer()\n✖ recipes::all_logical() masks gtsummary::all_logical()\n✖ recipes::all_numeric() masks gtsummary::all_numeric()\n✖ scales::discard()      masks purrr::discard()\n✖ dplyr::filter()        masks stats::filter()\n✖ recipes::fixed()       masks stringr::fixed()\n✖ dplyr::lag()           masks stats::lag()\n✖ yardstick::spec()      masks readr::spec()\n✖ recipes::step()        masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(furrr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: future\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\ndata_patient_complete_response_as_factor <- data_patient_complete |>\n  mutate(\n    flag_ADR_TP_ID = as.factor(flag_ADR_TP_ID)\n  )\n\nfit_univariate_regression <- function(predictor) {\n  model <- logistic_reg() |>\n    set_engine(\"glm\") |>\n    set_mode(\"classification\") |>\n    fit(\n      reformulate(\n        termlabels = predictor,\n        response = \"flag_ADR_TP_ID\"\n      ),\n      data = data_patient_complete_response_as_factor\n    )\n}\n\narrange_univariate_regression <- function(model) {\n  model |>\n    tbl_regression(\n      exponentiate = TRUE,\n      show_single_row = everything()\n    ) |>\n    bold_p()\n}\n\nplan(multisession, workers = min(parallel::detectCores() - 2, 10))\nuni_model_list <- future_map(predictor_list, fit_univariate_regression)\ntable_uni_list <- future_map(uni_model_list, arrange_univariate_regression)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\nExtracting {parsnip} model fit with `tbl_regression(x = x$fit, ...)`\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nplan(sequential)\n\ntable_uni <- tbl_stack(table_uni_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntable_descriptive <- tbl_merge(\n  list(table_stats, table_uni),\n  tab_spanner = c(\n    \"**Thrombocytopenia Status**\",\n    \"**Univariate Regression**\"\n  )\n)\nsave(table_descriptive, file = \"data/results/table-descriptive.rda\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntable_descriptive_site <- data_patient_complete |>\n  select(\n    all_of(predictor_list), starts_with(\"comed\"), flag_ADR_TP_ID, site\n  ) |>\n  tbl_summary(\n    by = site,\n    statistic = list(all_continuous() ~ \"{median} ({p25} - {p75})\"),\n    missing = \"no\"\n  ) |>\n  add_overall() |>\n  bold_labels()\n\nsave(table_descriptive_site, file = \"data/results/table-descriptive-site.rda\")\n```\n:::",
    "supporting": [
      "2-descriptive-statistics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}