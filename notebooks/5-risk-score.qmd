---
title: Risk Score System and Algorithm
---

```{r}
source("notebooks/initialize-data-analysis.r")
load("data/model-performance/model-full.rda")
```

```{r}
library(tidyverse)
library(tidymodels)

model_beta_estimates <- model_full$fit |>
  tidy() |>
  select(term, estimate, p.value)

model_odds_ratios <- model_full$fit |>
  tidy(conf.int = TRUE, exponentiate = TRUE) |>
  select(term, estimate, conf.low, conf.high) |>
  filter(term != "(Intercept)") |>
  rename(odds_ratio = estimate, OR_lower = conf.low, OR_upper = conf.high)

predictor_list_with_intercept <- c(predictor_list, "(Intercept)")

parameter_estimates <- left_join(model_beta_estimates, model_odds_ratios, by = "term") |>
  rename(risk_factor = term, beta = estimate, p_value = p.value) |>
  mutate(risk_factor = str_extract(risk_factor, paste(predictor_list_with_intercept, collapse = "|")))
```

## Risk Score System

All code below is not automatic. Variables and ranges are manually defined. 

```{r}
risk_profile_1 <- tibble(
  risk_factor = "patient_age",
  min_range = c(18, 30, 40, 50, 60, 70, 80, 90), # minimum age is 18
  max_range = lead(min_range, default = 101), # maximum age is 101, interval is 10
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_2 <- tibble(
  risk_factor = "baseline_PLT",
  min_range = c(150, 75, 50, 25, 18), # 1% percentile is 18
  max_range = lag(min_range, default = 434), # 99% percentile is 434
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    min_range = replace(min_range, n(), -Inf),
    max_range = replace(max_range, 1, Inf),
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_3 <- tibble(
  risk_factor = "LZD_duration",
  min_range = c(3, 7, 14), # 1% percentile is 3
  max_range = lead(min_range, default = 26), # 99% percentile is 26
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    min_range = replace(min_range, 1, -Inf),
    max_range = replace(max_range, n(), Inf),
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_4 <- tibble(
  risk_factor = "invasive_CRRT",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile <- bind_rows(risk_profile_1, risk_profile_2, risk_profile_3, risk_profile_4)
```

```{r}
B_constant <- parameter_estimates |>
  filter(risk_factor == "patient_age") |>
  pull(beta) * 10 # constant equivalent to 10-year increase in age

points_system_full <- parameter_estimates |>
  select(risk_factor, beta) |>
  right_join(risk_profile, by = "risk_factor") |>
  group_by(risk_factor) |>
  mutate(
    beta_sum = beta * (reference - reference[which.max(flag_base_risk)]),
    points = round(beta_sum / B_constant, 0)
  )

points_system_factors <- points_system_full |>
  select(risk_factor, min_range, max_range, points)

min_points <- points_system_full |>
  group_by(risk_factor) |>
  summarise(min_points = min(points)) |>
  summarise(total_min_points = sum(min_points)) |>
  pull(total_min_points)

max_points <- points_system_full |>
  group_by(risk_factor) |>
  summarise(max_points = max(points)) |>
  summarise(total_max_points = sum(max_points)) |>
  pull(total_max_points)

risk_function <- function(points) {
  intercept <- parameter_estimates |>
    filter(risk_factor == "Intercept") |>
    pull(beta)

  beta_base <- points_system_full |>
    filter(flag_base_risk == TRUE) |>
    ungroup() |>
    summarise(
      beta_base = sum(beta * reference)
    ) |>
    pull(beta_base)
  
  1 / (1 + exp(-(intercept + beta_base + B_constant * points)))
}

points_system_risks <- tibble(
  points_total = seq(min_points, max_points),
  risk_estimate = risk_function(points_total)
)

points_system_factors |> knitr::kable()
points_system_risks |> knitr::kable()
```

```{r}

```