---
title: Risk Score System and Algorithm
---

```{r}
source("notebooks/initialize-data-analysis.r")
source("notebooks/BMA-model-no-initial-var.r")
load("data/model-performance/model-full-BPM-1-A.rda")
load("data/model-performance/model-black-box.rda")
load("data/model-performance/model-full-BPM-2-A.rda")

load("data/results/variables-to-screen.rda")
load("data/results/variables-to-screen-short.rda")
load("data/results/variables-to-screen-short-binary.rda")
load("data/results/variables-to-screen-binary.rda")
load("data/results/variables-to-screen-all.rda")
load("data/results/variables-to-screen-all-binary.rda")
```

```{r}
library(tidyverse)
library(tidymodels)

model_beta_estimates_1_A <- model_full_BPM_1_A |>
  tidy() |>
  select(term, estimate, p.value)

model_odds_ratios_1_A <- model_full_BPM_1_A |>
  tidy(conf.int = TRUE, exponentiate = TRUE) |>
  select(term, estimate, conf.low, conf.high) |>
  filter(term != "(Intercept)") |>
  rename(odds_ratio = estimate, OR_lower = conf.low, OR_upper = conf.high)

predictor_list_with_intercept_1_A <- c(variables_to_screen, "(Intercept)")

parameter_estimates_1_A <- 
  left_join(model_beta_estimates_1_A, model_odds_ratios_1_A, by = "term") |>
  rename(risk_factor = term, beta = estimate, p_value = p.value) |>
  mutate(risk_factor = str_extract(risk_factor, paste(predictor_list_with_intercept_1_A, collapse = "|")))

# parameter_estimates |>
#   mutate(raw_score = beta / min(abs(beta)))
```

```{r}
data_refit_1_A <- model_full_BPM_1_A |>
  extract_mold() |>
  _$predictors |>
  mutate(across(where(is.numeric), ~ . / 10)) |>
  rename_with(~ paste0(., "_per_10"), .cols = where(is.numeric)) |>
  bind_cols(model_full_BPM_1_A |> extract_mold() |> _$outcomes)

model_refit_1_A <- workflow() |>
  add_variables(outcomes = "flag_ADR_TP_ID", predictors = everything()) |>
  add_model(logistic_reg()) |>
  fit(data = data_refit_1_A)

model_refit_odds_ratios_1_A <- model_refit_1_A |>
  tidy(conf.int = TRUE, exponentiate = TRUE) |>
  select(term, estimate, conf.low, conf.high) |>
  filter(term != "(Intercept)") |>
  rename(odds_ratio = estimate, OR_lower = conf.low, OR_upper = conf.high) |>
  mutate(term = str_replace_all(term, "TRUE", ""))

# model_full_BPM_1_A |>
#   extract_mold() |>
#   _$predictors |> pull(baseline_PLT) |> quantile(c(0, 0.01, 0.99, 1), na.rm = TRUE)
```

```{r}
summarise_quantile <- function(x, probs = c(0, 0.01, 0.99, 1)) {
  tibble(value = quantile(x, probs, na.rm = TRUE), prob = probs)
}

quantile_table <- data_patient_transformed |>
  select(where(is.numeric) & !starts_with("ADR")) |>
  reframe(across(everything(), summarise_quantile, .unpack = TRUE)) |>
  select(ends_with("value")) |>
  pivot_longer(
    cols = everything(),
    names_to = "risk_factor",
    names_pattern = "(.+)_.+",
    values_to = "value"
  ) |>
  arrange(risk_factor) |>
  mutate(prob = case_when(
    row_number() %% 4 == 1 ~ 0,
    row_number() %% 4 == 2 ~ 0.01,
    row_number() %% 4 == 3 ~ 0.99,
    row_number() %% 4 == 0 ~ 1
  ))

# reference_range_logical <- data_patient_transformed |>
#   select(
#     where(is.logical) & (any_of(variables_to_screen_all) | any_of(variables_to_screen_all_binary))
#   ) |>
#   colnames() |>
#   tibble(.name_repair = ~ ("risk_factor")) |>
#   group_by(risk_factor) |>
#   tidyr::expand(min_range = c(0, 1), max_range = c(0, 1)) |>
#   filter(min_range == max_range) |>
#   mutate(reference = min_range, flag_base_risk = !as.logical(min_range)) |>
#   ungroup()
```

## Risk Score System

All code below is not automatic. Variables and ranges are manually defined. 

Current model predictors: `patient_age`, `baseline_CLCR`, `baseline_PLT`, `LZD_duration_14`, `comed_heparin`, `infect_sepsis`, `comorb_cirr`, `invasive_CRRT`

```{r}
risk_profile_1_A_1 <- tibble(
  risk_factor = "patient_age",
  min_range = c(18, 30, 40, 50, 60, 70, 80, 90), # minimum age is 18
  max_range = lead(min_range, default = 101), # maximum age is 101, interval is 10
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_1_A_2 <- tibble(
  risk_factor = "baseline_CLCR",
  min_range = c(130, 90, 60, 30, 5), # 1% percentile is 5
  max_range = lag(min_range, default = 191), # 99% percentile is 191
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    min_range = replace(min_range, n(), -Inf),
    max_range = replace(max_range, 1, Inf),
    flag_base_risk = ifelse(min_range == 90, TRUE, flag_base_risk)
  )

risk_profile_1_A_3 <- tibble(
  risk_factor = "baseline_PLT",
  min_range = c(150, 75, 50, 25, 18), # 1% percentile is 18
  max_range = lag(min_range, default = 434), # 99% percentile is 434
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    min_range = replace(min_range, n(), -Inf),
    max_range = replace(max_range, 1, Inf),
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_1_A_4 <- tibble(
  risk_factor = "LZD_duration_14",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_1_A_5 <- tibble(
  risk_factor = "comed_heparin",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_1_A_6 <- tibble(
  risk_factor = "infect_sepsis",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_1_A_7 <- tibble(
  risk_factor = "comorb_cirr",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_1_A_8 <- tibble(
  risk_factor = "invasive_CRRT",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_1_A <- bind_rows(risk_profile_1_A_1, risk_profile_1_A_2, risk_profile_1_A_3, risk_profile_1_A_4, risk_profile_1_A_5, risk_profile_1_A_6, risk_profile_1_A_7, risk_profile_1_A_8)
```

```{r}
create_point_system <- function(parameter_estimates, risk_profile) {
  B_constant <- parameter_estimates |>
    filter(risk_factor == "patient_age") |>
    pull(beta) * 10 # constant equivalent to 10-year increase in age

  points_system_full <- parameter_estimates |>
    select(risk_factor, beta) |>
    right_join(risk_profile, by = "risk_factor") |>
    group_by(risk_factor) |>
    mutate(
      beta_sum = beta * (reference - reference[which.max(flag_base_risk)]),
      points = round(beta_sum / B_constant, 0)
    )

  points_system_factors <- points_system_full |>
    select(risk_factor, min_range, max_range, points)

  min_points <- points_system_full |>
    group_by(risk_factor) |>
    summarise(min_points = min(points)) |>
    summarise(total_min_points = sum(min_points)) |>
    pull(total_min_points)

  max_points <- points_system_full |>
    group_by(risk_factor) |>
    summarise(max_points = max(points)) |>
    summarise(total_max_points = sum(max_points)) |>
    pull(total_max_points)

  risk_function <- function(points) {
    intercept <- parameter_estimates |>
      filter(risk_factor == "Intercept") |>
      pull(beta)

    beta_base <- points_system_full |>
      filter(flag_base_risk == TRUE) |>
      ungroup() |>
      summarise(
        beta_base = sum(beta * reference)
      ) |>
      pull(beta_base)

    1 / (1 + exp(-(intercept + beta_base + B_constant * points)))
  }

  points_system_risks <- tibble(
    points_total = seq(min_points, max_points),
    risk_estimate = risk_function(points_total)
  )
  list(points_system_full = points_system_full, points_system_factors = points_system_factors, points_system_risks = points_system_risks)
}

points_system_1_A <- create_point_system(parameter_estimates_1_A, risk_profile_1_A)
points_system_full_1_A <- points_system_1_A$points_system_full
points_system_factors_1_A <- points_system_1_A$points_system_factors
points_system_risks_1_A <- points_system_1_A$points_system_risks
```

```{r}
library(probably)
predictive_values_1_A <- model_refit_1_A |>
  predict(data_refit_1_A, type = "prob") |>
  mutate(flag_ADR_TP_ID = data_refit_1_A$flag_ADR_TP_ID) |>
  threshold_perf(
    truth = flag_ADR_TP_ID,
    estimate = .pred_FALSE,
    thresholds = points_system_risks_1_A |> pull(risk_estimate),
    metrics = metric_set(mcc, sensitivity, specificity, ppv, npv, j_index)
  ) |>
  select(-.estimator) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(score = points_system_risks_1_A |> pull(points_total))

predictive_values_1_A |>
  select(.threshold, sensitivity, specificity) |>
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_point() +
  geom_path() +
  geom_segment(
    x = 1 - (predictive_values_1_A |> filter(j_index == max(j_index)) |> pull(specificity)),
    xend = 1 - (predictive_values_1_A |> filter(j_index == max(j_index)) |> pull(specificity)),
    y = 1 - (predictive_values_1_A |> filter(j_index == max(j_index)) |> pull(specificity)),
    yend = predictive_values_1_A |> filter(j_index == max(j_index)) |> pull(sensitivity),
    linetype = 2
  ) +
  geom_abline(lty = 3) +
  coord_equal() +
  theme_bw()
```

```{r}
predictive_values_1_A |> knitr::kable()
points_system_factors_1_A |> knitr::kable()
points_system_risks_1_A |> knitr::kable()
```

# BMA Black Box (10 variables)
```{r}
library(BAS)
model_black_box_estimates <- coef(model_black_box) |>
  confint(nsim = 2^20) |>
  structure(class = c("confint.bas", "matrix")) |>
  as_tibble() |>
  mutate(
    term = model_black_box$namesx |>
      str_extract(paste(c(variables_to_screen_short, "Intercept"), collapse = "|")) |>
      unique()
  ) |>
  relocate(c(term, beta)) |>
  rename(
    risk_factor = term,
    lower = `2.5%`,
    upper = `97.5%`
  ) |>
  mutate(across(c(lower, upper, beta), as.double))

model_black_box_odds_ratio <- model_black_box_estimates |>
  mutate(across(c(lower, upper, beta), exp)) |>
  rename(
    odds_ratio = beta
  )
```

```{r}
risk_profile_BMA_1 <- tibble(
  risk_factor = "patient_age",
  min_range = c(18, 30, 40, 50, 60, 70, 80, 90), # minimum age is 18
  max_range = lead(min_range, default = 101), # maximum age is 101, interval is 10
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_2 <- tibble(
  risk_factor = "baseline_CLCR",
  min_range = c(130, 90, 60, 30, 5), # 1% percentile is 5
  max_range = lag(min_range, default = 191), # 99% percentile is 191
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    min_range = replace(min_range, n(), -Inf),
    max_range = replace(max_range, 1, Inf),
    flag_base_risk = ifelse(min_range == 90, TRUE, flag_base_risk)
  )

risk_profile_BMA_3 <- tibble(
  risk_factor = "baseline_PLT",
  min_range = c(150, 75, 50, 25, 18), # 1% percentile is 18
  max_range = lag(min_range, default = 434), # 99% percentile is 434
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    min_range = replace(min_range, n(), -Inf),
    max_range = replace(max_range, 1, Inf),
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_4 <- tibble(
  risk_factor = "LZD_duration_14",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_5 <- tibble(
  risk_factor = "comed_heparin",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_6 <- tibble(
  risk_factor = "infect_sepsis",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_7 <- tibble(
  risk_factor = "dept_ICU_ER",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_8 <- tibble(
  risk_factor = "comorb_cirr",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_9 <- tibble(
  risk_factor = "invasive_CRRT",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_BMA_10 <- tibble(
  risk_factor = "comed_enoxaparin",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

# risk_profile_BMA_11 <- tibble(
#   risk_factor = "LZD_route_IV",
#   min_range = c(0, 1), # 0 or 1
#   max_range = c(0, 1), # 0 or 1
#   reference = c(0, 1),
#   flag_base_risk = FALSE
# ) |>
#   mutate(
#     flag_base_risk = replace(flag_base_risk, 1, TRUE)
#   )

# risk_profile_BMA_12 <- tibble(
#   risk_factor = "infect_septicemia",
#   min_range = c(0, 1), # 0 or 1
#   max_range = c(0, 1), # 0 or 1
#   reference = c(0, 1),
#   flag_base_risk = FALSE
# ) |>
#   mutate(
#     flag_base_risk = replace(flag_base_risk, 1, TRUE)
#   )

# risk_profile_BMA_13 <- tibble(
#   risk_factor = "invasive_IHD",
#   min_range = c(0, 1), # 0 or 1
#   max_range = c(0, 1), # 0 or 1
#   reference = c(0, 1),
#   flag_base_risk = FALSE
# ) |>
#   mutate(
#     flag_base_risk = replace(flag_base_risk, 1, TRUE)
#   )

risk_profile_BMA <- paste0("risk_profile_BMA_", 1:10) |>
  mget() |> # "when you have to use mget(), something has gone wrong"
  bind_rows()
```

```{r}
points_system_BMA <- create_point_system(model_black_box_estimates, risk_profile_BMA)
points_system_factors_BMA <- points_system_BMA$points_system_factors
points_system_risks_BMA <- points_system_BMA$points_system_risks
points_system_full_BMA <- points_system_BMA$points_system_full
```

```{r}
library(probably)

BMA_pred <- predict(model_black_box, type = "response")

predictive_values_BMA <- BMA_pred$fit |>
  as_tibble() |>
  rename(.pred_TRUE = value) |>
  mutate(
    .pred_FALSE = 1 - .pred_TRUE,
    flag_ADR_TP_ID = data_patient_transformed$flag_ADR_TP_ID |> as_factor()
  ) |>
  threshold_perf(
    truth = flag_ADR_TP_ID,
    estimate = .pred_FALSE,
    thresholds = points_system_risks_BMA |> pull(risk_estimate),
    metrics = metric_set(mcc, sensitivity, specificity, ppv, npv, j_index)
  ) |>
  select(-.estimator) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(score = points_system_risks_BMA |> pull(points_total))

predictive_values_BMA |>
  select(.threshold, sensitivity, specificity) |>
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_point() +
  geom_path() +
  geom_segment(
    x = 1 - (predictive_values_BMA |> filter(j_index == max(j_index)) |> pull(specificity)),
    xend = 1 - (predictive_values_BMA |> filter(j_index == max(j_index)) |> pull(specificity)),
    y = 1 - (predictive_values_BMA |> filter(j_index == max(j_index)) |> pull(specificity)),
    yend = predictive_values_BMA |> filter(j_index == max(j_index)) |> pull(sensitivity),
    linetype = 2
  ) +
  geom_abline(lty = 3) +
  coord_equal() +
  theme_bw()
```

```{r}
predictive_values_BMA |> knitr::kable()
points_system_factors_BMA |> knitr::kable()
points_system_risks_BMA |> knitr::kable()
```

# Logistic Model 2-A

```{r}
library(tidyverse)
library(tidymodels)

model_beta_estimates_2_A <- model_full_BPM_2_A |>
  tidy() |>
  select(term, estimate, p.value)

model_odds_ratios_2_A <- model_full_BPM_2_A |>
  tidy(conf.int = TRUE, exponentiate = TRUE) |>
  select(term, estimate, conf.low, conf.high) |>
  filter(term != "(Intercept)") |>
  rename(odds_ratio = estimate, OR_lower = conf.low, OR_upper = conf.high)

predictor_list_with_intercept_2_A <- c(variables_to_screen, "(Intercept)")

parameter_estimates_2_A <- 
  left_join(model_beta_estimates_2_A, model_odds_ratios_2_A, by = "term") |>
  rename(risk_factor = term, beta = estimate, p_value = p.value) |>
  mutate(risk_factor = str_extract(risk_factor, paste(predictor_list_with_intercept_2_A, collapse = "|")))

# parameter_estimates |>
#   mutate(raw_score = beta / min(abs(beta)))
```

```{r}
data_refit_2_A <- model_full_BPM_2_A |>
  extract_mold() |>
  _$predictors |>
  mutate(across(where(is.numeric), ~ . / 10)) |>
  rename_with(~ paste0(., "_per_10"), .cols = where(is.numeric)) |>
  bind_cols(model_full_BPM_2_A |> extract_mold() |> _$outcomes)

model_refit_2_A <- workflow() |>
  add_variables(outcomes = "flag_ADR_TP_ID", predictors = everything()) |>
  add_model(logistic_reg()) |>
  fit(data = data_refit_2_A)

model_refit_odds_ratios_2_A <- model_refit_2_A |>
  tidy(conf.int = TRUE, exponentiate = TRUE) |>
  select(term, estimate, conf.low, conf.high) |>
  filter(term != "(Intercept)") |>
  rename(odds_ratio = estimate, OR_lower = conf.low, OR_upper = conf.high) |>
  mutate(term = str_replace_all(term, "TRUE", ""))
```

All code below is not automatic. Variables and ranges are manually defined. 

Current model predictors: `patient_age`, `baseline_PLT`, `LZD_duration_14`, `comed_heparin`, `infect_sepsis`

```{r}
risk_profile_2_A_1 <- tibble(
  risk_factor = "patient_age",
  min_range = c(18, 30, 40, 50, 60, 70, 80, 90), # minimum age is 18
  max_range = lead(min_range, default = 101), # maximum age is 101, interval is 10
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

# risk_profile_2_A_2 <- tibble(
#   risk_factor = "baseline_CLCR",
#   min_range = c(130, 90, 60, 30, 5), # 1% percentile is 5
#   max_range = lag(min_range, default = 191), # 99% percentile is 191
#   reference = (min_range + max_range) / 2,
#   flag_base_risk = FALSE
# ) |>
#   mutate(
#     min_range = replace(min_range, n(), -Inf),
#     max_range = replace(max_range, 1, Inf),
#     flag_base_risk = ifelse(min_range == 90, TRUE, flag_base_risk)
#   )

risk_profile_2_A_3 <- tibble(
  risk_factor = "baseline_PLT",
  min_range = c(150, 75, 50, 25, 18), # 1% percentile is 18
  max_range = lag(min_range, default = 434), # 99% percentile is 434
  reference = (min_range + max_range) / 2,
  flag_base_risk = FALSE
) |>
  mutate(
    min_range = replace(min_range, n(), -Inf),
    max_range = replace(max_range, 1, Inf),
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_2_A_4 <- tibble(
  risk_factor = "LZD_duration_14",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_2_A_5 <- tibble(
  risk_factor = "comed_heparin",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

risk_profile_2_A_6 <- tibble(
  risk_factor = "infect_sepsis",
  min_range = c(0, 1), # 0 or 1
  max_range = c(0, 1), # 0 or 1
  reference = c(0, 1),
  flag_base_risk = FALSE
) |>
  mutate(
    flag_base_risk = replace(flag_base_risk, 1, TRUE)
  )

# risk_profile_2_A_7 <- tibble(
#   risk_factor = "comorb_cirr",
#   min_range = c(0, 1), # 0 or 1
#   max_range = c(0, 1), # 0 or 1
#   reference = c(0, 1),
#   flag_base_risk = FALSE
# ) |>
#   mutate(
#     flag_base_risk = replace(flag_base_risk, 1, TRUE)
#   )

# risk_profile_2_A_8 <- tibble(
#   risk_factor = "invasive_CRRT",
#   min_range = c(0, 1), # 0 or 1
#   max_range = c(0, 1), # 0 or 1
#   reference = c(0, 1),
#   flag_base_risk = FALSE
# ) |>
#   mutate(
#     flag_base_risk = replace(flag_base_risk, 1, TRUE)
#   )

risk_profile_2_A <- bind_rows(risk_profile_2_A_1, risk_profile_2_A_3, risk_profile_2_A_4, risk_profile_2_A_5, risk_profile_2_A_6)
```

```{r}
create_point_system <- function(parameter_estimates, risk_profile) {
  B_constant <- parameter_estimates |>
    filter(risk_factor == "patient_age") |>
    pull(beta) * 10 # constant equivalent to 10-year increase in age

  points_system_full <- parameter_estimates |>
    select(risk_factor, beta) |>
    right_join(risk_profile, by = "risk_factor") |>
    group_by(risk_factor) |>
    mutate(
      beta_sum = beta * (reference - reference[which.max(flag_base_risk)]),
      points = round(beta_sum / B_constant, 0)
    )

  points_system_factors <- points_system_full |>
    select(risk_factor, min_range, max_range, points)

  min_points <- points_system_full |>
    group_by(risk_factor) |>
    summarise(min_points = min(points)) |>
    summarise(total_min_points = sum(min_points)) |>
    pull(total_min_points)

  max_points <- points_system_full |>
    group_by(risk_factor) |>
    summarise(max_points = max(points)) |>
    summarise(total_max_points = sum(max_points)) |>
    pull(total_max_points)

  risk_function <- function(points) {
    intercept <- parameter_estimates |>
      filter(risk_factor == "Intercept") |>
      pull(beta)

    beta_base <- points_system_full |>
      filter(flag_base_risk == TRUE) |>
      ungroup() |>
      summarise(
        beta_base = sum(beta * reference)
      ) |>
      pull(beta_base)

    1 / (1 + exp(-(intercept + beta_base + B_constant * points)))
  }

  points_system_risks <- tibble(
    points_total = seq(min_points, max_points),
    risk_estimate = risk_function(points_total)
  )
  list(points_system_full = points_system_full, points_system_factors = points_system_factors, points_system_risks = points_system_risks)
}

points_system_2_A <- create_point_system(parameter_estimates_2_A, risk_profile_2_A)
points_system_full_2_A <- points_system_2_A$points_system_full
points_system_factors_2_A <- points_system_2_A$points_system_factors
points_system_risks_2_A <- points_system_2_A$points_system_risks
```

```{r}
library(probably)
predictive_values_2_A <- model_refit_2_A |>
  predict(data_refit_2_A, type = "prob") |>
  mutate(flag_ADR_TP_ID = data_refit_2_A$flag_ADR_TP_ID) |>
  threshold_perf(
    truth = flag_ADR_TP_ID,
    estimate = .pred_FALSE,
    thresholds = points_system_risks_2_A |> pull(risk_estimate),
    metrics = metric_set(mcc, sensitivity, specificity, ppv, npv, j_index)
  ) |>
  select(-.estimator) |>
  pivot_wider(names_from = .metric, values_from = .estimate) |>
  mutate(score = points_system_risks_2_A |> pull(points_total))

predictive_values_2_A |>
  select(.threshold, sensitivity, specificity) |>
  ggplot(aes(x = 1 - specificity, y = sensitivity)) +
  geom_point() +
  geom_path() +
  geom_segment(
    x = 1 - (predictive_values_2_A |> filter(j_index == max(j_index)) |> pull(specificity)),
    xend = 1 - (predictive_values_2_A |> filter(j_index == max(j_index)) |> pull(specificity)),
    y = 1 - (predictive_values_2_A |> filter(j_index == max(j_index)) |> pull(specificity)),
    yend = predictive_values_2_A |> filter(j_index == max(j_index)) |> pull(sensitivity),
    linetype = 2
  ) +
  geom_abline(lty = 3) +
  coord_equal() +
  theme_bw()
```

```{r}
predictive_values_2_A |> knitr::kable()
points_system_factors_2_A |> knitr::kable()
points_system_risks_2_A |> knitr::kable()
```
